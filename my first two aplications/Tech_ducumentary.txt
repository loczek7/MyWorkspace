ADMINVC-EDIT

Projekt ADMINVC-EDIT to narzędzie służące do edycji danych dotyczących aplikacji takich jak nazwa aplikacji,ID,adres IP,domena, wersja aplikacji, kometarz itp.
Interfejs umożliwia edycję,dodawanie,usuwanie i przesyłanie danych do servera.

Funkcjonalność:
1.Wczytywanie i wyświetlanie danych do tabeli z bazy danych.
2.Dynamiczne generowanie dodawanych wierszy poprzez kliknięcie przycisku.
3.Możliwość edytowania istniejących danych.
4.Usuwanie wierszy lokalnie jak i na serwerze.
5.Walidacja dat: Obsługiwanie jedynie formatu dat(YYYY-MM-DD).
6.Powiadomienia użytkownika w formie alertów (sukcesów oraz błędów).
7.Synchronizacja (zapisywanie/aktualizowanie) danych z serverem za pomocą przycisku.
8.Sprawdzanie stanu wierszy (New, Changed, Unchanged) w ramach prostrzego znalezienia ostatnich zmian.
9.Wykorzystanie danych zaciągnietych poprzez "fetch('/app_ids')" do stworzenia wyboru AppID z listy.
10.Łącze do aplikacji pod adresem "http://127.0.0.1:5000/appids".
11.Przycisk umozliwiający powrót do strony głównej pod adresem "http://127.0.0.1:5000".

Struktura projektu:
HTML: Plik edit.html odpowiada za strukturę aplikacji i jej widok.
CSS : Stylizacja interfejsu, m.in. tabela, przyciski, alerty.
JavaScript : Obsługa logiki aplikacji, takich jak operacje na danych i komunikowanie się z serwerem.

Szczegóły
2. Przycisk "Add row":
2.1 Przycisk dodawania wierszy ma się znajdować na środku strony na samym dole.
2.2 Nowo dodane wiersze mają otrzymywać numeryczne ID od 1000 w górę.

5. Walidacja dat:
5.1 Podczas zapisywania danych poprzez przycisk Submit strona ma odrzucić działanie, jeśli użytkownik nie wpisał daty, bądź wpisał ale w złym formacie. Dopuszczalny format dat :YYYY-MM-DD.

6.Alerty :
6.1 Alert/powiadomienie dla uźytkownika ma się pojawić w sytuacji wpisania daty w złym formacie oraz ma się wyświetlić poprawny format w alercie.
Tak samo przy braku dany ma się wyswietlić alert powidamiający o wpisaniu date do tabeli.
6.2 Alerty mają być czerwone na błędów/errorów natomiast zielone dla sukcesów.
6.3 Alert również ma się wyświetlać jako potwierdzenie zapisania danych jak i usunięcia.

7. Zapisywanie danych na serwer:
7.1 Dane zapisywane na server muszą być zapisywane pojedyńczo poprzez metodę "POST.
7.2 Tak samo jak dane zapisywane dane usuwane muszą być usuwane pojedyńczo.
7.3 Dane, które zostały zmienione należy zaktualizować w bazie danych również aktualizowane pojedyńczo.

8. Funkcja sprawdzająca stan aktualnych wierszy:
8.1 Funkcja ma sprawdzać czy dane w wierszach zostały zmienione(Changed) albo nowo dodane(New), bądź niezmienione(Unchanged).
8.2 Na podstawie "8.1" mają być odpowiedznio aktualizowane dane na serwerze.

9.Dane zaciągniete poprzez "fetch('/app_ids')" mają zostać wykorzystane do stworzenia w tabeli elementu <select> w którym będą znajdowały się 
pojedyńcze elementy z tej bazy danych a dokładnie tylko "app_id", któr mają być wybierane z rozwijanej listy.

10. Łącze w postaci "+" obok rozwijanej wczesniej wspomnianej tablicy do podstrony "http://127.0.0.1:5000/appids".

11. Przycisk "Return",który przekieuje użytkownika na strone główną o adresie "http://127.0.0.1:5000".

Diagram architektury systemu:
[User] --> [Web Application Frontend] --> [Backend API] --> [Database]

Obsługiwane EndPointy:

pobieranie danych do listy <select> - "fetch('/app_ids')

usuwanie danych - DELETE/delete/${"id wiersza usuwanego"}

zapisywanie danych - POST/new 

aktualizowanie danych - PUT/edit/${id wiersza do aktualizacji}

Wszystkie dane są wysyłane w formacie JSON

Podsumowanie: Aplikacja to narzędzie do edytowania bazy danych aby usprawnić szybkość wykonywania tego.
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
English version:
ADMINVC-EDIT

The ADMINVC-EDIT project is a tool for editing application data such as application name, ID, IP address, domain, application version, comments, etc.
The interface allows editing, adding, deleting, and sending data to the server.

Functionality:
1. Loading and displaying data in a table from the database.
2. Dynamically generating added rows by clicking a button.
3. Ability to edit existing data.
4. Deleting rows both locally and on the server.
5. Date validation: Only supporting date format (YYYY-MM-DD).
6. User notifications in the form of alerts (success and error messages).
7. Synchronization (saving/updating) of data with the server using a button.
8. Checking row status (New, Changed, Unchanged) to easily identify recent changes.
9. Using data fetched via "fetch('/app_ids')" to create an AppID selection list.
10. Application link available at "http://127.0.0.1:5000/appids".
11. Button allowing a return to the homepage at "http://127.0.0.1:5000".

Project Structure:
HTML: The edit.html file defines the application’s structure and layout.
CSS: Styles the interface, including the table, buttons, and alerts.
JavaScript: Handles application logic, such as data operations and server communication.

Details:
2. "Add row" button:
2.1 The row addition button should be positioned at the bottom center of the page.
2.2 Newly added rows should receive numerical IDs starting from 1000 and above.

5. Date Validation:
5.1 When saving data using the Submit button, the page should reject the action if the user has not entered a date or entered it in the wrong format. The allowed date format is YYYY-MM-DD.

6. Alerts:
6.1 An alert/notification should appear if the user enters a date in the wrong format, displaying the correct format in the alert.
Similarly, if no date is entered, an alert should notify the user to enter a date in the table.
6.2 Alerts should be red for errors and green for successes.
6.3 An alert should also be displayed as confirmation of data saving or deletion.

7. Saving Data to the Server:
7.1 Data saved on the server must be stored individually using the "POST" method.
7.2 Similarly, deleted data must be removed individually.
7.3 Modified data should be updated in the database individually.

8. Function to Check Row Status:
8.1 The function should check whether data in the rows has been changed (Changed), newly added (New), or unchanged (Unchanged).
8.2 Based on "8.1", data should be appropriately updated on the server.

9. Data fetched via "fetch('/app_ids')" should be used to create a <select> element in the table containing individual elements from this database, specifically "app_id", which should be selected from the dropdown list.

10. A "+" link next to the previously mentioned dropdown table leading to the subpage "http://127.0.0.1:5000/appids".

11. "Return" button that redirects the user to the homepage at "http://127.0.0.1:5000".

System Architecture Diagram:
[User] --> [Web Application Frontend] --> [Backend API] --> [Database]

Supported Endpoints:

Fetching data for the <select> list - "fetch('/app_ids')"

Deleting data - DELETE/delete/${"ID of the deleted row"}

Saving data - POST/new 

Updating data - PUT/edit/${ID of the row to update}

All data is sent in JSON format.

Summary: The application is a tool for editing the database to improve the speed of performing this task.
